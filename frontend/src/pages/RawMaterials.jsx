// src/pages/RawMaterialsPage.jsx
import React, { useState, useEffect } from "react";
import axios from "axios";
import {
    Box, Button, TextField, MenuItem, Typography,
    Table, TableHead, TableRow, TableCell, TableBody,
    TableContainer, Paper, Dialog, DialogTitle, DialogContent,
    DialogActions, Tooltip, Snackbar, Alert, CircularProgress,
    ThemeProvider
} from "@mui/material";
import PlusIcon from "../assets/plus-svgrepo-com.svg";
import PenIcon from "../assets/pen-svgrepo-com.svg";
import TrashIcon from "../assets/trash-svgrepo-com.svg";
import { theme } from '../theme/theme.jsx';
import {
    inputStyle,
    selectWhiteStyle,
    tableHeadCellStyle,
    tableBodyCellStyle,
    glassTableStyle,
} from '../theme/uiStyles.js';

export default function RawMaterialsPage() {
    const [rawMaterials, setRawMaterials] = useState([]);
    const [units, setUnits] = useState([]);
    const [loading, setLoading] = useState(false);

    const [form, setForm] = useState({
        name: "", quantity: "", total_amount: "", unit_id: ""
    });
    const [createOpen, setCreateOpen] = useState(false);
    const [editOpen, setEditOpen] = useState(false);
    const [deleteOpen, setDeleteOpen] = useState(false);
    const [current, setCurrent] = useState(null);

    const [snackbarOpen, setSnackbarOpen] = useState(false);
    const [snackbarMsg, setSnackbarMsg] = useState("");
    const [snackbarSeverity, setSnackbarSeverity] = useState("success");
    const showSnackbar = (msg, sev = "success") => {
        setSnackbarMsg(msg);
        setSnackbarSeverity(sev);
        setSnackbarOpen(true);
    };

    // üí° —É—Ç–∏–ª–∏—Ç–∞
    function parseError(err) {
        const error = err.response?.data?.error;
        return typeof error === "string" ? error : error?.message || err.message;
    }

// –∑–∞–≥—Ä—É–∑–∫–∞
    useEffect(() => {
        loadData();
    }, []);

    async function loadData() {
        setLoading(true);
        try {
            const [rmRes, uRes] = await Promise.all([
                axios.get("/api/raw-materials"),
                axios.get("/api/units")
            ]);
            setRawMaterials(rmRes.data);
            setUnits(uRes.data);
        } catch (err) {
            const msg = parseError(err);
            showSnackbar("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: " + msg, "error");
        } finally {
            setLoading(false);
        }
    }

    const handleFormChange = e => {
        const { name, value } = e.target;
        setForm(f => ({ ...f, [name]: value }));
    };

// —Å–æ–∑–¥–∞—Ç—å
    const handleCreate = async () => {
        const { name, quantity, total_amount, unit_id } = form;
        if (!name || !quantity || !total_amount || !unit_id) {
            showSnackbar("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", "error");
            return;
        }
        setLoading(true);
        try {
            await axios.post("/api/raw-material/create", {
                name,
                quantity: +quantity,
                total_amount: +total_amount,
                unit_id: +unit_id
            });
            showSnackbar("–°—ã—Ä—å—ë –¥–æ–±–∞–≤–ª–µ–Ω–æ");
            setCreateOpen(false);
            setForm({ name: "", quantity: "", total_amount: "", unit_id: "" });
            await loadData();
        } catch (err) {
            const msg = parseError(err);
            showSnackbar("–û—à–∏–±–∫–∞: " + msg, "error");
        } finally {
            setLoading(false);
        }
    };

    const handleEdit = async () => {
        if (!current.name || !current.quantity || !current.total_amount || !current.unit_id) {
            showSnackbar("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", "error");
            return;
        }

        setLoading(true);
        try {
            const payload = {
                name: current.name,
                quantity: Number(current.quantity),
                total_amount: Number(current.total_amount),
                unit_id: Number(current.unit_id),
            };

            await axios.put(`/api/raw-material/update/${current.id}`, payload);

            showSnackbar("–ò–∑–º–µ–Ω–µ–Ω–æ");
            setEditOpen(false);
            await loadData();
        } catch (err) {
            const msg = parseError(err);
            showSnackbar("–û—à–∏–±–∫–∞: " + msg, "error");
        } finally {
            setLoading(false);
        }
    };

// —É–¥–∞–ª–∏—Ç—å
    const handleDelete = async () => {
        setLoading(true);
        try {
            await axios.delete(`/api/raw-material/delete/${current.id}`);
            showSnackbar("–£–¥–∞–ª–µ–Ω–æ");
            setDeleteOpen(false);
            await loadData();
        } catch (err) {
            const msg = parseError(err);
            showSnackbar("–û—à–∏–±–∫–∞: " + msg, "error");
        } finally {
            setLoading(false);
        }
    };


    return (
        <ThemeProvider theme={theme}>
            <Box sx={{ color: "#fff", marginTop: "10%" }}>
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ + –∫–Ω–æ–ø–∫–∞ */}
                <Box sx={{
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                    mb: 2
                }}>
                    <Typography variant="h4" color="#000">–°—ã—Ä—å—ë</Typography>
                    <Tooltip title="–î–æ–±–∞–≤–∏—Ç—å —Å—ã—Ä—å—ë" placement="right" slotProps={{
                        tooltip: { sx: { fontSize:14,p:"10px 14px",bgcolor:"#2a2a2a",color:"#fff",border:"1px solid #646cff",borderRadius:1 }}
                    }}>
            <span>
              <Button
                  variant="contained"
                  onClick={() => setCreateOpen(true)}
                  disabled={loading}
                  sx={{ p:1, minWidth:40, borderRadius:1 }}
              >
                <img src={PlusIcon} alt="–î–æ–±–∞–≤–∏—Ç—å" width={24} height={24}/>
              </Button>
            </span>
                    </Tooltip>
                </Box>

                {/* –¢–∞–±–ª–∏—Ü–∞ */}
                <TableContainer component={Paper} elevation={10} sx={glassTableStyle}>
                    <Table>
                        <TableHead>
                            <TableRow>
                                <TableCell sx={tableHeadCellStyle}>–ù–∞–∑–≤–∞–Ω–∏–µ</TableCell>
                                <TableCell sx={tableHeadCellStyle}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</TableCell>
                                <TableCell sx={tableHeadCellStyle}>–û–±—â–∞—è —Å—É–º–º–∞</TableCell>
                                <TableCell sx={tableHeadCellStyle}>–ï–¥–∏–Ω–∏—Ü–∞</TableCell>
                                <TableCell sx={tableHeadCellStyle}>–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {rawMaterials.length === 0 && !loading ? (
                                <TableRow>
                                    <TableCell colSpan={5} align="center" sx={tableBodyCellStyle}>
                                        –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                                    </TableCell>
                                </TableRow>
                            ) : rawMaterials.map(rm => (
                                <TableRow key={rm.id}>
                                    <TableCell sx={tableBodyCellStyle}>{rm.name}</TableCell>
                                    <TableCell sx={tableBodyCellStyle}>{rm.quantity}</TableCell>
                                    <TableCell sx={tableBodyCellStyle}>{rm.total_amount}</TableCell>
                                    <TableCell sx={tableBodyCellStyle}>
                                        {units.find(u => u.id === rm.unit_id)?.name}
                                    </TableCell>
                                    <TableCell sx={tableBodyCellStyle}>
                                        <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" placement="top" slotProps={{
                                            tooltip: { sx: { fontSize:14,p:"10px 14px",bgcolor:"#2a2a2a",color:"#fff",border:"1px solid #646cff",borderRadius:1 }}
                                        }}>
                                            <Button
                                                size="small"
                                                sx={{ minWidth:0, mr:1 }}
                                                onClick={() => {
                                                    setCurrent({
                                                        ...rm,
                                                        unit_id: rm.unit_id.toString(),
                                                        quantity: rm.quantity.toString(),
                                                        total_amount: rm.total_amount.toString()
                                                    });
                                                    setEditOpen(true);
                                                }}
                                            >
                                                <img src={PenIcon} alt="–†–µ–¥." width={20} height={20}/>
                                            </Button>
                                        </Tooltip>
                                        <Tooltip title="–£–¥–∞–ª–∏—Ç—å" placement="top" slotProps={{
                                            tooltip: { sx: { fontSize:14,p:"10px 14px",bgcolor:"#2a2a2a",color:"#fff",border:"1px solid #646cff",borderRadius:1 }}
                                        }}>
                                            <Button
                                                size="small"
                                                color="error"
                                                sx={{ minWidth:0 }}
                                                onClick={() => {
                                                    setCurrent(rm);
                                                    setDeleteOpen(true);
                                                }}
                                            >
                                                <img src={TrashIcon} alt="Del" width={20} height={20}/>
                                            </Button>
                                        </Tooltip>
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </TableContainer>

                {/* –î–∏–∞–ª–æ–≥ –°–æ–∑–¥–∞—Ç—å */}
                <Dialog open={createOpen} onClose={() => setCreateOpen(false)} fullWidth maxWidth="sm">
                    <DialogTitle sx={{ bgcolor:"#1e1e1e", color:"#fff" }}>–°–æ–∑–¥–∞—Ç—å —Å—ã—Ä—å—ë</DialogTitle>
                    <DialogContent sx={{ bgcolor:"#1e1e1e" }}>
                        <TextField
                            fullWidth margin="dense" label="–ù–∞–∑–≤–∞–Ω–∏–µ" name="name"
                            value={form.name} onChange={handleFormChange} sx={inputStyle}
                        />
                        <TextField
                            fullWidth margin="dense" label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" name="quantity" type="number"
                            value={form.quantity} onChange={handleFormChange} sx={inputStyle}
                        />
                        <TextField
                            fullWidth margin="dense" label="–û–±—â–∞—è —Å—É–º–º–∞" name="total_amount" type="number"
                            value={form.total_amount} onChange={handleFormChange} sx={inputStyle}
                        />
                        <TextField
                            select fullWidth margin="dense" label="–ï–¥–∏–Ω–∏—Ü–∞" name="unit_id"
                            value={form.unit_id} onChange={handleFormChange} sx={selectWhiteStyle}
                        >
                            {units.map(u => (
                                <MenuItem key={u.id} value={u.id.toString()}>{u.name}</MenuItem>
                            ))}
                        </TextField>
                    </DialogContent>
                    <DialogActions sx={{ bgcolor:"#1e1e1e" }}>
                        <Button onClick={() => setCreateOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
                        <Button onClick={handleCreate} variant="contained" disabled={loading}>
                            {loading ? <CircularProgress size={24}/> : "–°–æ–∑–¥–∞—Ç—å"}
                        </Button>
                    </DialogActions>
                </Dialog>

                {/* –î–∏–∞–ª–æ–≥ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å */}
                <Dialog open={editOpen} onClose={() => setEditOpen(false)} fullWidth maxWidth="sm">
                    <DialogTitle sx={{ bgcolor:"#1e1e1e", color:"#fff" }}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—ã—Ä—å—ë</DialogTitle>
                    <DialogContent sx={{ bgcolor:"#1e1e1e" }}>
                        <TextField
                            fullWidth margin="dense" label="–ù–∞–∑–≤–∞–Ω–∏–µ"
                            value={current?.name || ""} onChange={e => setCurrent(c => ({ ...c, name: e.target.value }))}
                            sx={inputStyle}
                        />
                        <TextField
                            fullWidth margin="dense" label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" type="number"
                            value={current?.quantity || ""} onChange={e => setCurrent(c => ({ ...c, quantity: +e.target.value }))}
                            sx={inputStyle}
                        />
                        <TextField
                            fullWidth margin="dense" label="–û–±—â–∞—è —Å—É–º–º–∞" type="number"
                            value={current?.total_amount || ""} onChange={e => setCurrent(c => ({ ...c, total_amount: +e.target.value }))}
                            sx={inputStyle}
                        />
                        <TextField
                            select fullWidth margin="dense" label="–ï–¥–∏–Ω–∏—Ü–∞"
                            value={current?.unit_id?.toString() || ""} onChange={e => setCurrent(c => ({ ...c, unit_id: +e.target.value }))}
                            sx={selectWhiteStyle}
                        >
                            {units.map(u => (
                                <MenuItem key={u.id} value={u.id.toString()}>{u.name}</MenuItem>
                            ))}
                        </TextField>
                    </DialogContent>
                    <DialogActions sx={{ bgcolor:"#1e1e1e" }}>
                        <Button onClick={() => setEditOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
                        <Button onClick={handleEdit} variant="contained" disabled={loading}>
                            {loading ? <CircularProgress size={24}/> : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"}
                        </Button>
                    </DialogActions>
                </Dialog>

                {/* –î–∏–∞–ª–æ–≥ –£–¥–∞–ª–∏—Ç—å */}
                <Dialog open={deleteOpen} onClose={() => setDeleteOpen(false)} fullWidth maxWidth="xs">
                    <DialogTitle sx={{ bgcolor:"#1e1e1e", color:"#fff" }}>–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?</DialogTitle>
                    <DialogActions sx={{ bgcolor:"#1e1e1e" }}>
                        <Button color="error" onClick={handleDelete} disabled={loading}>
                            {loading ? <CircularProgress size={24}/> : "–£–¥–∞–ª–∏—Ç—å"}
                        </Button>
                        <Button onClick={() => setDeleteOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
                    </DialogActions>
                </Dialog>

                {/* Snackbar */}
                <Snackbar
                    open={snackbarOpen}
                    autoHideDuration={6000}
                    onClose={() => setSnackbarOpen(false)}
                    anchorOrigin={{ vertical:"bottom", horizontal:"center" }}
                >
                    <Alert onClose={() => setSnackbarOpen(false)} severity={snackbarSeverity} sx={{ width:"100%" }}>
                        {snackbarMsg}
                    </Alert>
                </Snackbar>
            </Box>
        </ThemeProvider>
    );
}
