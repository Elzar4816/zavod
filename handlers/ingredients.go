package handlers

import (
	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
	"net/http"
	"strconv"
	"zavod/models"
)

func GetIngredients(c *gin.Context, db *gorm.DB) {
	var ingredients []models.Ingredient
	var finishedGoods []models.FinishedGood
	var rawMaterials []models.RawMaterial

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ —Å—ã—Ä—å–µ–º
	db.Preload("Product").Preload("RawMaterial").Find(&ingredients)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Å—ã—Ä—å–µ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
	db.Find(&finishedGoods)
	db.Find(&rawMaterials)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ
	c.JSON(http.StatusOK, gin.H{
		"ingredients":   ingredients,
		"finishedGoods": finishedGoods,
		"rawMaterials":  rawMaterials,
	})
}
func ListIngredients(c *gin.Context) {
	// –ü—Ä–æ—Å—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω, –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
	c.HTML(http.StatusOK, "ingredients.html", nil)
}

// üèó CRUD –¥–ª—è Ingredients
func CreateIngredient(c *gin.Context, db *gorm.DB) {
	var input models.Ingredient

	// –ß–∏—Ç–∞–µ–º JSON-–¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–í–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
	var existingIngredient models.Ingredient
	if err := db.Where("product_id = ? AND raw_material_id = ?", input.ProductID, input.RawMaterialID).First(&existingIngredient).Error; err == nil {
		c.JSON(http.StatusConflict, gin.H{"error": "–î–∞–Ω–Ω–æ–µ —Å—ã—Ä—å–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É"})
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
	ingredient := models.Ingredient{
		ProductID:     input.ProductID,
		RawMaterialID: input.RawMaterialID,
		Quantity:      input.Quantity,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
	db.Create(&ingredient)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	c.JSON(http.StatusOK, gin.H{"message": "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"})
}

func DeleteIngredient(c *gin.Context, db *gorm.DB) {
	id := c.Param("id")
	var ingredient models.Ingredient

	// –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º id
	if err := db.First(&ingredient, id).Error; err != nil {
		// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
		c.JSON(http.StatusNotFound, gin.H{"error": "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	// –£–¥–∞–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
	if err := db.Delete(&models.Ingredient{}, id).Error; err != nil {
		// –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"})
		return
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	c.JSON(http.StatusOK, gin.H{"message": "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"})
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
func UpdateIngredient(c *gin.Context, db *gorm.DB) {
	var ingredient models.Ingredient
	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
	if err := db.First(&ingredient, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (—Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
	var requestData struct {
		Quantity float64 `json:"quantity"`
	}

	if err := c.ShouldBindJSON(&requestData); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
	ingredient.Quantity = requestData.Quantity

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	if err := db.Save(&ingredient).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"})
		return
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	c.JSON(http.StatusOK, gin.H{"message": "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω"})
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
func GetFinishedGoods(c *gin.Context, db *gorm.DB) {
	var finishedGoods []models.FinishedGood
	if err := db.Find(&finishedGoods).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã"})
		return
	}
	c.JSON(http.StatusOK, finishedGoods)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—ã—Ä—å—è
func GetRawMaterials(c *gin.Context, db *gorm.DB) {
	var rawMaterials []models.RawMaterial
	if err := db.Find(&rawMaterials).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—ã—Ä—å–µ"})
		return
	}
	c.JSON(http.StatusOK, rawMaterials)
}
