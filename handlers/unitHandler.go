package handlers

import (
	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
	"log"
	"net/http"
	"zavod/models"
)

// ListUnits üìå –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
func ListUnits(c *gin.Context, db *gorm.DB) {
	var units []models.Unit
	if err := db.Find(&units).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	c.JSON(http.StatusOK, units) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
}

// üèó CRUD –¥–ª—è Units
func CreateUnit(c *gin.Context, db *gorm.DB) {
	var unit models.Unit
	// –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON (–Ω–µ –∏–∑ —Ñ–æ—Ä–º—ã)
	if err := c.ShouldBindJSON(&unit); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	if unit.Name == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"})
		return
	}

	if err := db.Create(&unit).Error; err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"id": unit.ID, "name": unit.Name})
}

func DeleteUnit(c *gin.Context, db *gorm.DB) {
	id := c.Param("id")
	var unit models.Unit
	if err := db.First(&unit, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
		return
	}

	if err := db.Delete(&unit).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"})
}

func UpdateUnit(c *gin.Context, db *gorm.DB) {
	id := c.Param("id")
	var unit models.Unit
	if err := db.First(&unit, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
		return
	}

	// –ß—Ç–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
	var updatedData struct {
		Name string `json:"name"`
	}
	if err := c.ShouldBindJSON(&updatedData); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	if updatedData.Name == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"})
		return
	}

	unit.Name = updatedData.Name // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	if err := db.Save(&unit).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"id": unit.ID, "name": unit.Name})
}
