package handlers

import (
	"log"
	"net/http"
	"strconv"
	"zavod/models"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

// üìå –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü

func ListUnits(c *gin.Context, db *gorm.DB) {
	var units []models.Unit
	db.Find(&units)

	c.HTML(http.StatusOK, "units.html", gin.H{
		"units": units,
	})
}

func ListRawMaterials(c *gin.Context, db *gorm.DB) {
	var rawMaterials []models.RawMaterial
	var units []models.Unit

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—ã—Ä—å–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
	db.Preload("Unit").Find(&rawMaterials)
	db.Find(&units)

	// –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
	c.HTML(http.StatusOK, "raw_materials.html", gin.H{
		"rawMaterials": rawMaterials,
		"units":        units,
	})
}

func ListFinishedGoods(c *gin.Context, db *gorm.DB) {
	var finishedGoods []models.FinishedGood
	var units []models.Unit

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤–º–µ—Å—Ç–µ —Å –∏—Ö –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
	db.Preload("Unit").Find(&finishedGoods)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
	db.Find(&units)

	// –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
	c.HTML(http.StatusOK, "finished_goods.html", gin.H{
		"finishedGoods": finishedGoods,
		"units":         units,
	})
}

func ListIngredients(c *gin.Context, db *gorm.DB) {
	var ingredients []models.Ingredient
	var finishedGoods []models.FinishedGood
	var rawMaterials []models.RawMaterial

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤–º–µ—Å—Ç–µ —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ —Å—ã—Ä—å–µ–º
	db.Preload("Product").Preload("RawMaterial").Find(&ingredients)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
	db.Find(&finishedGoods)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—ã—Ä—å–µ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
	db.Find(&rawMaterials)

	// –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
	c.HTML(http.StatusOK, "ingredients.html", gin.H{
		"ingredients":   ingredients,
		"finishedGoods": finishedGoods,
		"rawMaterials":  rawMaterials,
	})
}

// üèó CRUD –¥–ª—è Units
func CreateUnit(c *gin.Context, db *gorm.DB) {
	var unit models.Unit
	// –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON (–Ω–µ –∏–∑ —Ñ–æ—Ä–º—ã)
	if err := c.ShouldBindJSON(&unit); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	if unit.Name == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"})
		return
	}

	if err := db.Create(&unit).Error; err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"id": unit.ID, "name": unit.Name})
}

func DeleteUnit(c *gin.Context, db *gorm.DB) {
	id := c.Param("id")
	var unit models.Unit
	if err := db.First(&unit, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
		return
	}

	if err := db.Delete(&unit).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"})
}

func UpdateUnit(c *gin.Context, db *gorm.DB) {
	id := c.Param("id")
	var unit models.Unit
	if err := db.First(&unit, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
		return
	}

	// –ß—Ç–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
	var updatedData struct {
		Name string `json:"name"`
	}
	if err := c.ShouldBindJSON(&updatedData); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	if updatedData.Name == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"})
		return
	}

	unit.Name = updatedData.Name // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	if err := db.Save(&unit).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"id": unit.ID, "name": unit.Name})
}

// üèó CRUD –¥–ª—è Raw Materials
func CreateRawMaterial(c *gin.Context, db *gorm.DB) {
	var rawMaterial models.RawMaterial

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
	if err := c.ShouldBindJSON(&rawMaterial); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	if err := db.Create(&rawMaterial).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—ã—Ä—å—è"})
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–æ–≤–æ–º —Å—ã—Ä—å–µ
	c.JSON(http.StatusOK, gin.H{"message": "–°—ã—Ä—å–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ", "id": rawMaterial.ID})
}

func DeleteRawMaterial(c *gin.Context, db *gorm.DB) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "ID –Ω–µ —É–∫–∞–∑–∞–Ω"})
		return
	}

	// –ò—â–µ–º —Å—ã—Ä—å–µ –ø–æ ID
	var rawMaterial models.RawMaterial
	if err := db.First(&rawMaterial, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–°—ã—Ä—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
		return
	}

	// –£–¥–∞–ª—è–µ–º —Å—ã—Ä—å–µ –∏–∑ –±–∞–∑—ã
	if err := db.Delete(&rawMaterial).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—ã—Ä—å—è"})
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å ID —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å—ã—Ä—å—è
	c.JSON(http.StatusOK, gin.H{
		"id":      rawMaterial.ID,
		"message": "–°—ã—Ä—å–µ —É–¥–∞–ª–µ–Ω–æ",
	})
}

func UpdateRawMaterial(c *gin.Context, db *gorm.DB) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "ID –Ω–µ —É–∫–∞–∑–∞–Ω"})
		return
	}

	// –ò—â–µ–º —Å—ã—Ä—å–µ –ø–æ ID
	var rawMaterial models.RawMaterial
	if err := db.First(&rawMaterial, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–°—ã—Ä—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
	var input struct {
		Name        string  `json:"name"`
		Quantity    float64 `json:"quantity"`
		TotalAmount float64 `json:"total_amount"`
		UnitID      uint    `json:"unit_id"`
	}

	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
	rawMaterial.Name = input.Name
	rawMaterial.Quantity = input.Quantity
	rawMaterial.TotalAmount = input.TotalAmount
	rawMaterial.UnitID = input.UnitID

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	if err := db.Save(&rawMaterial).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—ã—Ä—å—è"})
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ–±—ä–µ–∫—Ç–æ–º —Å—ã—Ä—å—è
	c.JSON(http.StatusOK, gin.H{
		"id":           rawMaterial.ID,
		"name":         rawMaterial.Name,
		"quantity":     rawMaterial.Quantity,
		"total_amount": rawMaterial.TotalAmount,
		"unit_id":      rawMaterial.UnitID,
		"message":      "–°—ã—Ä—å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
	})
}

// üèó CRUD –¥–ª—è Finished Goods
func CreateFinishedGood(c *gin.Context, db *gorm.DB) {
	var finishedGood models.FinishedGood

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
	if err := c.BindJSON(&finishedGood); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid input data"})
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
	db.Create(&finishedGood)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å id
	c.JSON(http.StatusOK, finishedGood)
}

func DeleteFinishedGood(c *gin.Context, db *gorm.DB) {
	id := c.Param("id")

	// –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º
	if err := db.Delete(&models.FinishedGood{}, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Finished good not found"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞"})
}

func UpdateFinishedGood(c *gin.Context, db *gorm.DB) {
	var finishedGood models.FinishedGood
	id := c.Param("id")

	// –ò—â–µ–º –∑–∞–ø–∏—Å—å
	if err := db.First(&finishedGood, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Finished good not found"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
	if err := c.BindJSON(&finishedGood); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid input data"})
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	db.Save(&finishedGood)

	c.JSON(http.StatusOK, finishedGood)
}

// üèó CRUD –¥–ª—è Ingredients
func CreateIngredient(c *gin.Context, db *gorm.DB) {
	var input models.Ingredient

	// –ß–∏—Ç–∞–µ–º JSON-–¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–í–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
	var existingIngredient models.Ingredient
	if err := db.Where("product_id = ? AND raw_material_id = ?", input.ProductID, input.RawMaterialID).First(&existingIngredient).Error; err == nil {
		c.JSON(http.StatusConflict, gin.H{"error": "–î–∞–Ω–Ω–æ–µ —Å—ã—Ä—å–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É"})
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
	ingredient := models.Ingredient{
		ProductID:     input.ProductID,
		RawMaterialID: input.RawMaterialID,
		Quantity:      input.Quantity,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
	db.Create(&ingredient)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	c.JSON(http.StatusOK, gin.H{"message": "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"})
}

func DeleteIngredient(c *gin.Context, db *gorm.DB) {
	id := c.Param("id")
	var ingredient models.Ingredient

	// –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º id
	if err := db.First(&ingredient, id).Error; err != nil {
		// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
		c.JSON(http.StatusNotFound, gin.H{"error": "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	// –£–¥–∞–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
	if err := db.Delete(&models.Ingredient{}, id).Error; err != nil {
		// –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"})
		return
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	c.JSON(http.StatusOK, gin.H{"message": "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"})
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
func UpdateIngredient(c *gin.Context, db *gorm.DB) {
	var ingredient models.Ingredient
	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
	if err := db.First(&ingredient, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
	var requestData struct {
		ProductID     int     `json:"product_id"`
		RawMaterialID int     `json:"raw_material_id"`
		Quantity      float64 `json:"quantity"`
	}

	if err := c.ShouldBindJSON(&requestData); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–µ–º –ª–∏ –º—ã –¥—É–±–ª–∏–∫–∞—Ç
	var existingIngredient models.Ingredient
	if err := db.Where("product_id = ? AND raw_material_id = ? AND id != ?", requestData.ProductID, requestData.RawMaterialID, id).First(&existingIngredient).Error; err == nil {
		c.JSON(http.StatusConflict, gin.H{"error": "–î–∞–Ω–Ω–æ–µ —Å—ã—Ä—å–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É"})
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
	ingredient.ProductID = uint(requestData.ProductID)
	ingredient.RawMaterialID = uint(requestData.RawMaterialID)
	ingredient.Quantity = requestData.Quantity

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	if err := db.Save(&ingredient).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"})
		return
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	c.JSON(http.StatusOK, gin.H{"message": "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω"})
}
