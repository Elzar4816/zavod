package handlers

import (
	"net/http"
	_ "strconv"
	"zavod/models"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

// CreateRawMaterial üèó CRUD –¥–ª—è Raw Materials
func CreateRawMaterial(c *gin.Context, db *gorm.DB) {
	var rawMaterial models.RawMaterial

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
	if err := c.ShouldBindJSON(&rawMaterial); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	if err := db.Create(&rawMaterial).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—ã—Ä—å—è"})
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–æ–≤–æ–º —Å—ã—Ä—å–µ
	c.JSON(http.StatusOK, gin.H{"message": "–°—ã—Ä—å–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ", "id": rawMaterial.ID})
}

func DeleteRawMaterial(c *gin.Context, db *gorm.DB) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "ID –Ω–µ —É–∫–∞–∑–∞–Ω"})
		return
	}

	// –ò—â–µ–º —Å—ã—Ä—å–µ –ø–æ ID
	var rawMaterial models.RawMaterial
	if err := db.First(&rawMaterial, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–°—ã—Ä—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
		return
	}

	// –£–¥–∞–ª—è–µ–º —Å—ã—Ä—å–µ –∏–∑ –±–∞–∑—ã
	if err := db.Delete(&rawMaterial).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—ã—Ä—å—è"})
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å ID —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å—ã—Ä—å—è
	c.JSON(http.StatusOK, gin.H{
		"id":      rawMaterial.ID,
		"message": "–°—ã—Ä—å–µ —É–¥–∞–ª–µ–Ω–æ",
	})
}

func UpdateRawMaterial(c *gin.Context, db *gorm.DB) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "ID –Ω–µ —É–∫–∞–∑–∞–Ω"})
		return
	}

	// –ò—â–µ–º —Å—ã—Ä—å–µ –ø–æ ID
	var rawMaterial models.RawMaterial
	if err := db.First(&rawMaterial, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–°—ã—Ä—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
	var input struct {
		Name        string  `json:"name"`
		Quantity    float64 `json:"quantity"`
		TotalAmount float64 `json:"total_amount"`
		UnitID      uint    `json:"unit_id"`
	}

	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
	rawMaterial.Name = input.Name
	rawMaterial.Quantity = input.Quantity
	rawMaterial.TotalAmount = input.TotalAmount
	rawMaterial.UnitID = input.UnitID

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	if err := db.Save(&rawMaterial).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—ã—Ä—å—è"})
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ–±—ä–µ–∫—Ç–æ–º —Å—ã—Ä—å—è
	c.JSON(http.StatusOK, gin.H{
		"id":           rawMaterial.ID,
		"name":         rawMaterial.Name,
		"quantity":     rawMaterial.Quantity,
		"total_amount": rawMaterial.TotalAmount,
		"unit_id":      rawMaterial.UnitID,
		"message":      "–°—ã—Ä—å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
	})
}
