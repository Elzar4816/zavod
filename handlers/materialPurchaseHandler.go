package handlers

import (
	"errors"
	"net/http"
	"time"
	"zavod/models"
	"zavod/utils"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

const purchaseCode = "ERR_PURCHASE"

func GetPurchases(c *gin.Context, db *gorm.DB) {
	var purchases []models.RawMaterialPurchase
	if err := db.Preload("RawMaterial").
		Preload("Employee").
		Find(&purchases).Error; err != nil {
		utils.InternalError(c, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫—É–ø–∫–∏")
		return
	}
	c.JSON(http.StatusOK, purchases)
}

// CreateRawMaterialPurchase –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏
func CreateRawMaterialPurchase(c *gin.Context, db *gorm.DB) {
	var purchase models.RawMaterialPurchase

	// üß© –í–∞–ª–∏–¥–∞—Ü–∏—è JSON –≤–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	if err := c.ShouldBindJSON(&purchase); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	// üîí –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
	err := db.Transaction(func(tx *gorm.DB) error {
		// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞
		var budget models.Budget
		if err := tx.First(&budget).Error; err != nil {
			c.JSON(http.StatusNotFound, gin.H{"error": "–ë—é–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"})
			return err
		}
		if budget.TotalAmount < purchase.TotalAmount {
			c.JSON(http.StatusConflict, gin.H{"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±—é–¥–∂–µ—Ç–µ"})
			return errors.New("–±—é–¥–∂–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω")
		}
		budget.TotalAmount -= purchase.TotalAmount
		if err := tx.Save(&budget).Error; err != nil {
			return err
		}

		// 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫—É–ø–∫—É
		purchase.PurchaseDate = time.Now()
		if err := tx.Create(&purchase).Error; err != nil {
			return err
		}

		// 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—ã—Ä—å–µ
		var rawMaterial models.RawMaterial
		if err := tx.First(&rawMaterial, purchase.RawMaterialID).Error; err != nil {
			c.JSON(http.StatusNotFound, gin.H{"error": "–°—ã—Ä—å—ë –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
			return err
		}
		rawMaterial.Quantity += purchase.Quantity
		rawMaterial.TotalAmount += purchase.TotalAmount
		if err := tx.Save(&rawMaterial).Error; err != nil {
			return err
		}

		return nil
	})

	// ‚ùå –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ ‚Äî –æ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ
	if err != nil {
		return
	}

	// ‚úÖ –í—Å—ë —É—Å–ø–µ—à–Ω–æ
	c.JSON(http.StatusOK, gin.H{"message": "–ó–∞–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞", "id": purchase.ID})
}

// DeleteRawMaterialPurchase –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ —Å—ã—Ä—å—è
func DeleteRawMaterialPurchase(c *gin.Context, db *gorm.DB) {
	var purchase models.RawMaterialPurchase

	// ‚úÖ –ü–æ–ª—É—á–∞–µ–º id –∏–∑ URL
	id := c.Param("id")
	if err := db.First(&purchase, id).Error; err != nil {
		utils.NotFound(c, "–ó–∞–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	// 1. –í–µ—Ä–Ω—É—Ç—å —Å—É–º–º—É –≤ –±—é–¥–∂–µ—Ç
	var budget models.Budget
	if err := db.First(&budget).Error; err == nil {
		budget.TotalAmount += purchase.TotalAmount
		if !utils.SaveEntity(c, db, &budget, "ERR_BUDGET") {
			return
		}
	}

	// 2. –û–±–Ω–æ–≤–∏—Ç—å —Å—ã—Ä—å—ë
	var rawMaterial models.RawMaterial
	if err := db.First(&rawMaterial, purchase.RawMaterialID).Error; err != nil {
		utils.NotFound(c, "–°—ã—Ä—å—ë –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
		return
	}
	rawMaterial.Quantity -= purchase.Quantity
	rawMaterial.TotalAmount -= purchase.TotalAmount
	if !utils.SaveEntity(c, db, &rawMaterial, "ERR_RAW") {
		return
	}

	// 3. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏
	if !utils.DeleteEntity(c, db, &purchase, purchaseCode) {
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–ó–∞–∫—É–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞"})
}
